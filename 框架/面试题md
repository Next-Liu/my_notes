## 1.Servlet、Spring、Spring MVC以及Spring MVC的核心流程

**Servlet** 是 Java EE 规范的一部分，用于处理客户端（通常是浏览器）的 HTTP 请求并生成响应。

**Spring** 是一个轻量级的 Java 开发框架，提供了全面的基础设施支持，包括依赖注入（DI）、面向切面编程（AOP）、事务管理、数据访问等。

**Spring MVC** 是 Spring 框架中的一个模块，用于构建基于 MVC（Model-View-Controller）设计模式的 Web 应用程序。它是对 Servlet 的封装和扩展，提供了更强大的功能和更简洁的开发方式。



### Spring MVC的核心流程具体如下：

1. 请求到达 `DispatcherServlet`（前端控制器，负责接收所有请求并协调其他组件处理请求。）
2. `DispatcherServlet` 调用 `HandlerMapping`查找请求对应的处理器（Controller）。
3. 处理器（Controller）执行业务逻辑，处理请求参数，调用 Service 层，并返回 `ModelAndView`。
4. `DispatcherServlet` 调用 `ViewResolver`将视图名称映射到具体的视图文件。
5. `DispatcherServlet` 调用 `View` 渲染视图
6. `DispatcherServlet` 将渲染后的响应返回给客户端。

## 2.拦截器和过滤器

过滤器是 Servlet 规范的一部分，由 Servlet 容器（如 Tomcat）管理。它可以在**请求进入** **Servlet 之前和响应返回客户端之前执行逻辑**。

- **作用范围**：过滤器作用于整个应用，**可以拦截所有的请求和响应。**
- **执行顺序**：过滤器的执行顺序由 `web.xml` 或 `@WebFilter` 注解中的配置决定。
- **与 Spring 的关系**：过滤器是 Servlet 规范的一部分，不直接依赖于 Spring 框架，但可以与 Spring 集成。
- **适用场景**：**适合处理与业务无关**的全局逻辑，如字符编码设置（在请求进入应用之前，统一设置请求和响应的字符编码）、请求日志记录、跨域处理等。



拦截器是 Spring MVC 框架的一部分，它可以在请求进入 Controller 之前、Controller 方法执行之后以及视图渲染之前执行逻辑。

- **作用范围**：拦截器作用于 **Spring MVC 的请求**处理流程，只能拦截 Spring MVC 处理的请求。
- **执行顺序**：拦截器的执行顺序由配置顺序决定。
- **与 Spring 的关系**：拦截器是 Spring MVC 的一部分，依赖于 Spring 框架。
- **适用场景**：**适合处理与业务相关的逻辑**，如权限验证、日志记录、参数校验等。

### 总的执行顺序

当一个请求到达 Spring 应用时，过滤器和拦截器的执行顺序如下：

1. **过滤器（Filter）**：在请求进入 Servlet 之前执行。
2. **拦截器（Interceptor）**：在请求进入 Controller 之前执行。
3. **Controller 方法**：处理请求并返回结果。
4. **拦截器（Interceptor）**：在 Controller 方法执行之后、视图渲染之前执行。
5. **过滤器（Filter）**：在响应返回客户端之前执行。

## 3.自动装配

自动装配就是说把第三方的Bean装载到IOC容器里面，不需要开发人员写Bean的一个配置，SpringBoot中在启动类上加上**@SpringBootApplication**注解就可实现自动装配，这个注解包含了 **`@EnableAutoConfiguration`**，它会自动配置 Spring 应用所需的 Bean。

自动装配的实现主要依靠三个核心的关键技术：

 	1.引入starter，引入第三方依赖组件时，需包含一个@Configuration配置类，这个配置类中通过@Bean声明装载到IOC容器中的对象 

​	 2.这个配置类在第三方jar包里，通过SpringBoot的约定优于配置的理念把这个类的全路径放在classpath:/META-INF/spring.factories文件下

​	 3.在拿到第三方声明的配置类后，使用ImportSelector接口动态加载扫描到的配置类

## 4.IOC和AOP

IOC：将对象的创建和依赖关系的管理交给 Spring 容器来处理，而不是由开发者手动管理。

AOP：将横切关注点（如日志、事务管理、安全性等）从业务逻辑中分离出来，提高代码的模块化和可维护性。

- **@Aspect**：用于定义切面类。

- **@Before**、**@After**、**@Around**、**@AfterReturning**、**@AfterThrowing**：用于定义通知（Advice），即在目标方法执行前、后或周围执行的代码。

- **@Pointcut**：用于定义切入点，即哪些方法需要被拦截。

  ```java
  @Aspect
  @Component
  public class LoggingAspect {
  
      @Before("execution(* com.example.service.*.*(..))")
      public void logBefore(JoinPoint joinPoint) {
          System.out.println("Before method: " + joinPoint.getSignature().getName());
      }
  
      @After("execution(* com.example.service.*.*(..))")
      public void logAfter(JoinPoint joinPoint) {
          System.out.println("After method: " + joinPoint.getSignature().getName());
      }
  }
  ```

在这个例子中，`LoggingAspect` 定义了一个切面，它会在 `com.example.service` 包下的所有方法执行前后打印日志。

**底层实现原理：**

**1.核心业务类**

```java
public class UserService {
    public void addUser(String username) {
        System.out.println(" 添加用户: " + username);
    }
 
    public void deleteUser(String username) {
        System.out.println(" 删除用户: " + username);
    }
}
```

------

**2.使用 AOP 实现日志记录**

**2.1 定义切面**

```java
import org.aspectj.lang.annotation.Aspect; 
import org.aspectj.lang.annotation.Before; 
 
@Aspect 
public class LoggingAspect {
    @Before("execution(* UserService.*(..))")
    public void logBefore() {
        System.out.println(" 方法执行前记录日志");
    }
}
```

**2.2 配置 Spring AOP**

```xml
<bean id="userService" class="com.example.UserService"/>  
<bean id="loggingAspect" class="com.example.LoggingAspect"/> 
<aop:config>
    <aop:aspect ref="loggingAspect">
        <aop:before method="logBefore" pointcut="execution(* com.example.UserService.*(..))"/> 
    </aop:aspect>
</aop:config>
```

------

**3. 运行效果**

**3.1 调用业务方法**

```java
public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml"); 
        UserService userService = context.getBean(UserService.class); 
        userService.addUser("Alice"); 
        userService.deleteUser("Bob"); 
    }
}
```

**底层原理就是动态代理！！！！**

- **原理**：通过动态代理技术在运行时生成代理对象，拦截目标对象的方法调用。

静态代理：业务类和代理类需要实现同一个接口或者父类，需要编写大量代理类，因此有了动态代理

![](D:\学习笔记\框架\pictures\Snipaste_2025-03-12_17-46-52.png)

**动态代理：**运行过程中生成代理类的字节码文件（JDK内部实现，CGlib），Spring AOP本质就是通过这两种动态代理的方式

JDK的动态代理：主要通过Proxy.newProxyInstance实现，**被代理类（业务类）必须实现接口，因为动态生成的代理类是以实现目标类的接口的方法进行方法增强**

CGlib：**通过继承目标类实现业务增强**，此时目标类（业务类）不能是final类型的，因为加final的类不能被继承

## 5.BeanFactory和FactoryBean

## 6.SpringBoot中常用的设计模式有什么

## 7.为什么不推荐使用@Autowired

**`@Autowired` 是 Spring 框架中用于依赖注入的注解**

#### **1.1 紧耦合**

- **问题**：`@Autowired` 直接将依赖注入到字段或方法中，**导致类与具体实现类紧耦合。**

- **影响**：如果依赖的实现类发生变化，可能需要修改多个类，增加维护成本。

  ```java
  @Service 
  public class UserService {
      @Autowired 
      private UserRepository userRepository; // 直接依赖具体实现类 
  }
  ```

#### **1.2 隐藏依赖**

- **问题**：`@Autowired` 使类的依赖关系不明显，开发者无**法直接从类的定义中看出它依赖哪些组件。**

- **影响**：调试和排查问题时，需要额外查看代码或配置文件，增加了复杂性。

  ```java
  @Service 
  public class UserService {
      @Autowired 
      private UserRepository userRepository; // 依赖关系不明显 
  }
  ```

#### **1.3 单元测试困难**

- **问题**：`@Autowired` 依赖 Spring 容器，单元测试时需要启动 Spring 上下文或使用 Mock 框架。

- **影响**：测试复杂度增加，测试运行速度变慢，降低了开发效率。

  ```java
  @SpringBootTest 
  public class UserServiceTest {
      @Autowired 
      private UserService userService; // 测试需要 Spring 容器 
  }
  ```

#### **1.4 循环依赖**

- **问题**：`@Autowired` 可能导致类之间的循环依赖，例如 `A` 依赖 `B`，`B` 又依赖 `A`。

- **影响**：应用程序启动失败或运行时异常，难以调试和修复。

  ```java
  @Service 
  public class A {
      @Autowired 
      private B b;
  }
  
  @Service 
  public class B {
      @Autowired 
      private A a; // 循环依赖 
  }
  ```

**可以使用构造函数注入依赖**

**setter方式**

 **Lombok 的 `@RequiredArgsConstructor`**

- 优点

  - 简化构造函数注入代码。
  - 自动生成包含 `final` 字段的构造函数。

- 示例

  ```java
  @Service 
  @RequiredArgsConstructor 
  public class UserService {
      private final UserRepository userRepository; // 依赖通过 Lombok 自动注入 
  }
  ```

## 8.依赖注入的方式

用于实现控制反转（IoC）。它的核心思想是将对象的依赖关系由外部容器（如 Spring）注入，而不是由对象自己创建或查找依赖。

#### **3.1 构造函数注入**

- **特点**：通过构造函数传递依赖。

- **优点**：依赖关系明确，适合强制依赖。

  ```java
  public class UserService {
      private final UserRepository userRepository;
  
      public UserService(UserRepository userRepository) {
          this.userRepository  = userRepository;
      }
  }
  ```

#### **3.2 Setter 注入**

- **特点**：通过 Setter 方法传递依赖。

- **优点**：适合可选依赖，灵活性高。

  ```java
  public class UserService {
      private UserRepository userRepository;
  
      public void setUserRepository(UserRepository userRepository) {
          this.userRepository  = userRepository;
      }
  }
  ```

#### **3.3 字段注入**

- **特点**：通过字段直接注入依赖。

- **优点**：代码简洁。

- **缺点**：依赖关系不明显，不推荐使用。

  ```java
  public class UserService {
      @Autowired 
      private UserRepository userRepository;
  }
  ```

